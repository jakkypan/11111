apply plugin: 'pmd'

pmd {
    ignoreFailures = false
    ruleSetFiles = files("pmd.xml")
}

task pmd(type: Pmd) {
    source project.rootDir
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'

    if (project.hasProperty('checkPmd') && project.property("checkPmd")) {
        def ft = filterCommitter(getChangeFiles())
        def includeList = new ArrayList<String>()
        for (int i = 0; i < ft.size(); i++) {
            String spliter = ft.getAt(i)
            String[] spliterlist = spliter.split("/")
            String fileName = spliterlist[spliterlist.length - 1]
            includeList.add("**/" + fileName)
        }
        if (includeList.size() == 0) {
            exclude '**/*.java'
        } else {
            include includeList
        }
    } else {
        include '**/*.java'
        exclude '**/R.java'
        exclude '**/BuildConfig.java'
    }

    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            destination file("$project.buildDir/reports/pmd/pmd-report.xml")
        }
        html {
            destination file("$project.buildDir/reports/pmd/pmd-report.html")
        }
    }
}

/**
 * 唯一能检测到codestyle异常的办法
 */
//tasks.withType(Checkstyle).each { checkstyleTask ->
//    checkstyleTask.doLast {
//        reports.all { report ->
//            def outputFile = report.destination
//            if (outputFile.exists() && outputFile.text.contains("<error ")) {
//                throw new GradleException("There were checkstyle warnings! For more info check $outputFile")
//            }
//        }
//    }
//}

/**
 * 得到修改的文件
 *
 * @return
 */
def getChangeFiles() {
    try {
        String changeInfo = 'git status -s'.execute(null, project.rootDir).text.trim()
        return changeInfo == null ? "" : changeInfo
    } catch (Exception e) {
        e.printStackTrace()
    }
}

/**
 * 过滤掉java文件
 *
 * @param gitstatusinfo
 * @return
 */
static def filterCommitter(String gitstatusinfo) {
    ArrayList<String> filterList = new ArrayList<String>();
    String[] lines = gitstatusinfo.split("\\n")
    for (String line : lines) {
        if (line.contains(".java")) {
            String[] spliters = line.trim().split(" ");
            for (String str : spliters) {
                if (str.contains(".java")) {
                    filterList.add(str)
                }
            }
        }
    }
    return filterList;
}