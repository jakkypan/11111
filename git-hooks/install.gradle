import org.apache.tools.ant.taskdefs.condition.Os
import java.nio.file.Files

apply from: 'git-hooks/checkstyle.gradle'
apply from: 'git-hooks/pmd.gradle'

task installGitMessage(type: Exec) {
  copyHooks("commit-msg")
//  from (project.rootDir.absolutePath+'/.git/hooks')
//  into (project.rootDir.absolutePath+'/.git/hooks')
//  rename("commit-msg.sample", "commit-msg.bak")
//
//  // 拷贝脚本
//  def suffix = "mac.sh"
//  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
//    suffix = "win.bat"
//  }
//  from new File(project.rootDir, "git-hooks/commit-msg-$suffix")
//  into { new File(project.rootDir, '.git/hooks') }
//  rename("commit-msg-$suffix", "commit-msg")
//  fileMode 0777
}

task installCodeStyle(type: Exec) {
  copyHooks("pre-commit")
}

// 执行
gradle.projectsEvaluated {
  // insert git message
  def installGitMsg = project.tasks.getByName('installGitMessage')
  if (installGitMsg == null) {
    throw GradleException("installGitMessage is not found, please add git-hooks into your project")
  }
  installGitMsg.finalizedBy
  // check
  def file = new File(project.rootDir, ".git/hooks/commit-msg")
  if (!file.exists()) {
    throw GradleException("installGitMessage install failed,please check the gradle code")
  }
  chmod(file.absolutePath)

  // insert code style
  def installStyle = project.tasks.getByName('installCodeStyle')
  if (installStyle == null) {
    throw GradleException("installCodeStyle is not found, please add git-hooks into your project")
  }
  installStyle.finalizedBy
  // check
  file = new File(project.rootDir, ".git/hooks/pre-commit")
  if (!file.exists()) {
    throw GradleException("installCodeStyle install failed,please check the gradle code")
  }
  chmod(file.absolutePath)
}


def copyHooks(name) {
  // 备份sample
  def root = new File(project.rootDir, '.git/hooks')
  def bak = new File(root, "${name}.bak")
  if (bak.exists()) {
    return
  }
  def sample = new File(root, "${name}.sample")
  if(!sample.renameTo(bak)) {
    throw GradleException("rename file error")
  }
  // 拷贝脚本
  def gitRoot = new File(project.rootDir, 'git-hooks')
  def suffix = "-mac.sh"
  if (Os.isFamily(Os.FAMILY_WINDOWS)) {
    suffix = "-win.bat"
  }
  def msg = new File(gitRoot, name+suffix)
  def dest = new File(root, name)
  dest << msg.text
}

def chmod(path) {
  def runtime = Runtime.getRuntime()
  def command = "chmod 770 " + path
  def process = runtime.exec(command)
  process.waitFor()
  def existValue = process.exitValue()
  if(existValue != 0) {
    throw GradleException("installGitMessage install failed due to chmod failed")
  }
}



//gradle.projectsEvaluated {
//  def proc = './git-hooks/install.sh'.execute()
//  def os = new StringBuffer()
//  proc.waitForProcessOutput(os, System.err)
//  print(os.toString())
//  // 不成功，终止编译
//  if (!os.toString().contains("success")) {
//    throw new GradleException('occure error when insert commit message git hook，you can contact 大君')
//  }
//
//  proc = './git-hooks/install-style.sh'.execute()
//  os = new StringBuffer()
//  proc.waitForProcessOutput(os, System.err)
//  print(os.toString())
//  // 不成功，终止编译
//  if (!os.toString().contains("success")) {
//    throw new GradleException('occure error when insert check style git hook，you can contact 大君')
//  }
//}
